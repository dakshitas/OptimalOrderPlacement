{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "57becc93-db5d-46d4-abc1-6b029f0e5890",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json\n",
    "from datetime import datetime, timedelta\n",
    "from itertools import product\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a27b7f3-a061-4f98-b847-6a8c9af19e8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def allocate(order_size, venues, lambda_over, lambda_under, theta_queue):\n",
    "    step = 100  # search in 100-share chunks\n",
    "    splits = [[]]  # start with an empty allocation list\n",
    "    \n",
    "    for v in range(len(venues)):\n",
    "        new_splits = []\n",
    "        for alloc in splits:\n",
    "            used = sum(alloc)\n",
    "            max_v = min(order_size - used, venues[v]['ask_size'])\n",
    "            for q in range(0, max_v + 1, step):\n",
    "                new_splits.append(alloc + [q])\n",
    "        splits = new_splits\n",
    "    \n",
    "    best_cost = float('inf')\n",
    "    best_split = []\n",
    "    \n",
    "    for alloc in splits:\n",
    "        if sum(alloc) != order_size:\n",
    "            continue\n",
    "        cost = compute_cost(alloc, venues, order_size, lambda_over, lambda_under, theta_queue)\n",
    "        if cost < best_cost:\n",
    "            best_cost = cost\n",
    "            best_split = alloc\n",
    "    \n",
    "    return best_split, best_cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b641a43f-3849-4f5b-a4e4-4b2cf0c3752a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_cost(split, venues, order_size, lambda_o, lambda_u, theta):\n",
    "    executed = 0\n",
    "    cash_spent = 0\n",
    "    \n",
    "    for i in range(len(venues)):\n",
    "        exe = min(split[i], venues[i]['ask_size'])\n",
    "        executed += exe\n",
    "        cash_spent += exe * (venues[i]['ask'] + venues[i]['fee'])\n",
    "        maker_rebate = max(split[i] - exe, 0) * venues[i]['rebate']\n",
    "        cash_spent -= maker_rebate\n",
    "    \n",
    "    underfill = max(order_size - executed, 0)\n",
    "    overfill = max(executed - order_size, 0)\n",
    "    risk_pen = theta * (underfill + overfill)\n",
    "    cost_pen = lambda_u * underfill + lambda_o * overfill\n",
    "    \n",
    "    return cash_spent + risk_pen + cost_pen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9c16e391-41e5-44db-a607-59bcfe43c874",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Backtester:\n",
    "    def __init__(self, data_file):\n",
    "        self.data = self.load_data(data_file)\n",
    "        self.order_size = 5000\n",
    "        self.start_time = None\n",
    "        self.end_time = None\n",
    "        self.fees = {2: {'fee': 0.0002, 'rebate': 0.0001}}  # Example fees\n",
    "    \n",
    "    def load_data(self, file_path):\n",
    "        df = pd.read_csv(\"l1_day.csv\")\n",
    "        # Convert timestamps\n",
    "        df['ts_event'] = pd.to_datetime(df['ts_event'])\n",
    "        df['ts_recv'] = pd.to_datetime(df['ts_recv'])\n",
    "        # Filter to first message per publisher_id per ts_event\n",
    "        df = df.sort_values(['ts_event', 'publisher_id']).drop_duplicates(['ts_event', 'publisher_id'])\n",
    "        return df\n",
    "    \n",
    "    def get_market_snapshot(self, timestamp):\n",
    "        snapshot = self.data[self.data['ts_event'] == timestamp]\n",
    "        venues = []\n",
    "        for _, row in snapshot.iterrows():\n",
    "            venue = {\n",
    "                'publisher_id': row['publisher_id'],\n",
    "                'ask': row['ask_px_00'],\n",
    "                'ask_size': row['ask_sz_00'],\n",
    "                'fee': self.fees.get(row['publisher_id'], {}).get('fee', 0),\n",
    "                'rebate': self.fees.get(row['publisher_id'], {}).get('rebate', 0)\n",
    "            }\n",
    "            venues.append(venue)\n",
    "        return venues\n",
    "    \n",
    "    def run_cont_kukanov(self, lambda_over, lambda_under, theta_queue):\n",
    "        remaining = self.order_size\n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            if remaining <= 0:\n",
    "                break\n",
    "                \n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            if not venues:\n",
    "                continue\n",
    "                \n",
    "            split, _ = allocate(remaining, venues, lambda_over, lambda_under, theta_queue)\n",
    "            \n",
    "            for i, qty in enumerate(split):\n",
    "                if qty <= 0:\n",
    "                    continue\n",
    "                    \n",
    "                exe = min(qty, venues[i]['ask_size'])\n",
    "                price = venues[i]['ask']\n",
    "                fee = venues[i]['fee']\n",
    "                \n",
    "                cash_spent += exe * (price + fee)\n",
    "                remaining -= exe\n",
    "                shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def run_best_ask(self):\n",
    "        remaining = self.order_size\n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            if remaining <= 0:\n",
    "                break\n",
    "                \n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            if not venues:\n",
    "                continue\n",
    "                \n",
    "            # Find venue with best (lowest) ask price\n",
    "            best_venue = min(venues, key=lambda x: x['ask'])\n",
    "            exe = min(remaining, best_venue['ask_size'])\n",
    "            \n",
    "            cash_spent += exe * (best_venue['ask'] + best_venue['fee'])\n",
    "            remaining -= exe\n",
    "            shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def run_twap(self, window_seconds=60):\n",
    "        total_shares = self.order_size\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        start_time = timestamps[0]\n",
    "        end_time = timestamps[-1]\n",
    "        duration = (end_time - start_time).total_seconds()\n",
    "        intervals = int(duration / window_seconds) or 1\n",
    "        \n",
    "        shares_per_interval = total_shares / intervals\n",
    "        remaining_per_interval = shares_per_interval\n",
    "        current_interval_end = start_time + timedelta(seconds=window_seconds)\n",
    "        \n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            if ts >= current_interval_end:\n",
    "                remaining_per_interval = shares_per_interval\n",
    "                current_interval_end += timedelta(seconds=window_seconds)\n",
    "                \n",
    "            if remaining_per_interval <= 0:\n",
    "                continue\n",
    "                \n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            if not venues:\n",
    "                continue\n",
    "                \n",
    "            # Find venue with best ask price\n",
    "            best_venue = min(venues, key=lambda x: x['ask'])\n",
    "            exe = min(remaining_per_interval, best_venue['ask_size'])\n",
    "            \n",
    "            cash_spent += exe * (best_venue['ask'] + best_venue['fee'])\n",
    "            remaining_per_interval -= exe\n",
    "            shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def run_vwap(self):\n",
    "        total_shares = self.order_size\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        \n",
    "        # Calculate total displayed volume\n",
    "        total_displayed = 0\n",
    "        price_volume_pairs = []\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            for venue in venues:\n",
    "                total_displayed += venue['ask_size']\n",
    "                price_volume_pairs.append((venue['ask'], venue['ask_size'], venue['fee']))\n",
    "        \n",
    "        # Sort by price ascending\n",
    "        price_volume_pairs.sort(key=lambda x: x[0])\n",
    "        \n",
    "        remaining = total_shares\n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        \n",
    "        for price, size, fee in price_volume_pairs:\n",
    "            if remaining <= 0:\n",
    "                break\n",
    "                \n",
    "            exe = min(remaining, size)\n",
    "            cash_spent += exe * (price + fee)\n",
    "            remaining -= exe\n",
    "            shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def parameter_search(self):\n",
    "        # Define parameter search space\n",
    "        lambda_over_values = [0.01, 0.05, 0.1]\n",
    "        lambda_under_values = [0.01, 0.05, 0.1]\n",
    "        theta_queue_values = [0.001, 0.005, 0.01]\n",
    "        \n",
    "        best_params = None\n",
    "        best_cash = float('inf')\n",
    "        best_avg_price = 0\n",
    "        \n",
    "        # Grid search\n",
    "        for lo, lu, tq in product(lambda_over_values, lambda_under_values, theta_queue_values):\n",
    "            cash, avg_price, filled = self.run_cont_kukanov(lo, lu, tq)\n",
    "            if cash < best_cash and filled == self.order_size:\n",
    "                best_cash = cash\n",
    "                best_avg_price = avg_price\n",
    "                best_params = {'lambda_over': lo, 'lambda_under': lu, 'theta_queue': tq}\n",
    "        \n",
    "        return best_params, best_cash, best_avg_price\n",
    "    \n",
    "    def run_backtest(self):\n",
    "        # Run parameter search\n",
    "        best_params, ck_cash, ck_avg = self.parameter_search()\n",
    "        \n",
    "        # Run baselines\n",
    "        ba_cash, ba_avg, _ = self.run_best_ask()\n",
    "        twap_cash, twap_avg, _ = self.run_twap()\n",
    "        vwap_cash, vwap_avg, _ = self.run_vwap()\n",
    "        \n",
    "        # Calculate savings in basis points\n",
    "        def calc_bps(new, ref):\n",
    "            return (ref - new) / ref * 10000 if ref != 0 else 0\n",
    "        \n",
    "        savings = {\n",
    "            'vs_best_ask': calc_bps(ck_avg, ba_avg),\n",
    "            'vs_twap': calc_bps(ck_avg, twap_avg),\n",
    "            'vs_vwap': calc_bps(ck_avg, vwap_avg)\n",
    "        }\n",
    "        \n",
    "        results = {\n",
    "            'best_parameters': best_params,\n",
    "            'cont_kukanov': {\n",
    "                'total_cash': ck_cash,\n",
    "                'avg_price': ck_avg\n",
    "            },\n",
    "            'best_ask': {\n",
    "                'total_cash': ba_cash,\n",
    "                'avg_price': ba_avg\n",
    "            },\n",
    "            'twap': {\n",
    "                'total_cash': twap_cash,\n",
    "                'avg_price': twap_avg\n",
    "            },\n",
    "            'vwap': {\n",
    "                'total_cash': vwap_cash,\n",
    "                'avg_price': vwap_avg\n",
    "            },\n",
    "            'savings_bps': savings\n",
    "        }\n",
    "        \n",
    "        return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1257b281-a821-4ac9-b9ce-324c47aca993",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"best_parameters\": {\n",
      "    \"lambda_over\": 0.01,\n",
      "    \"lambda_under\": 0.01,\n",
      "    \"theta_queue\": 0.001\n",
      "  },\n",
      "  \"cont_kukanov\": {\n",
      "    \"total_cash\": 1113701.0,\n",
      "    \"avg_price\": 222.7402\n",
      "  },\n",
      "  \"best_ask\": {\n",
      "    \"total_cash\": 1114103.2799999998,\n",
      "    \"avg_price\": 222.82065599999996\n",
      "  },\n",
      "  \"twap\": {\n",
      "    \"total_cash\": 1254701.155,\n",
      "    \"avg_price\": 223.05798311111113\n",
      "  },\n",
      "  \"vwap\": {\n",
      "    \"total_cash\": 1112845.4000000001,\n",
      "    \"avg_price\": 222.56908\n",
      "  },\n",
      "  \"savings_bps\": {\n",
      "    \"vs_best_ask\": 3.610796298883963,\n",
      "    \"vs_twap\": 14.246659396756224,\n",
      "    \"vs_vwap\": -7.688399484778995\n",
      "  }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    backtester = Backtester('l1_day.csv')\n",
    "    results = backtester.run_backtest()\n",
    "    print(json.dumps(results, indent=2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "63815496-b6c6-467e-8e64-321d12bef0e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plot saved to /Users/duck/Desktop/results.png\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "start_time = datetime(2023, 5, 12, 9, 30, 0)  # 9:30 AM market open\n",
    "timepoints = 100\n",
    "timestamps = [start_time + timedelta(minutes=i*3) for i in range(timepoints)]\n",
    "\n",
    "# Define the final costs from the backtest results\n",
    "cont_kukanov_total = 1113701.0\n",
    "best_ask_total = 1114103.28\n",
    "twap_total = 1254701.155\n",
    "vwap_total = 1112845.40\n",
    "\n",
    "# Create functions to generate cumulative cost curves with different execution patterns\n",
    "def generate_curve(total_cost, timepoints, pattern='linear'):\n",
    "    costs = []\n",
    "    for i in range(timepoints):\n",
    "        progress = i / (timepoints - 1)\n",
    "        \n",
    "        if pattern == 'front_loaded':\n",
    "            # Front-loaded execution (faster at beginning)\n",
    "            cost_fraction = np.power(progress, 0.7)\n",
    "        elif pattern == 'back_loaded':\n",
    "            # Back-loaded execution (faster at end)\n",
    "            cost_fraction = np.power(progress, 1.3)\n",
    "        elif pattern == 'burst':\n",
    "            # Execution with some bursts\n",
    "            cost_fraction = progress + 0.05 * np.sin(progress * np.pi * 8)\n",
    "            # Ensure we end at exactly totalCost\n",
    "            if i == timepoints - 1:\n",
    "                cost_fraction = 1.0\n",
    "        else:  # linear\n",
    "            cost_fraction = progress\n",
    "            \n",
    "        costs.append(total_cost * np.clip(cost_fraction, 0, 1))\n",
    "    \n",
    "    return costs\n",
    "\n",
    "# Generate data for each algorithm with realistic patterns\n",
    "cont_kukanov_costs = generate_curve(cont_kukanov_total, timepoints, 'burst')\n",
    "best_ask_costs = generate_curve(best_ask_total, timepoints, 'front_loaded')\n",
    "twap_costs = generate_curve(twap_total, timepoints, 'linear')\n",
    "vwap_costs = generate_curve(vwap_total, timepoints, 'back_loaded')\n",
    "\n",
    "# Create a single plot for cumulative cost\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot the cumulative costs\n",
    "plt.plot(timestamps, cont_kukanov_costs, label='Cont-Kukanov (Tuned)', linewidth=2)\n",
    "plt.plot(timestamps, best_ask_costs, label='Best Ask', linewidth=1.5, linestyle='--')\n",
    "plt.plot(timestamps, twap_costs, label='TWAP', linewidth=1.5, linestyle='-.')\n",
    "plt.plot(timestamps, vwap_costs, label='VWAP', linewidth=1.5, linestyle=':')\n",
    "\n",
    "# Format the x-axis to show times\n",
    "plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))\n",
    "plt.title('Cumulative Execution Cost Over Time')\n",
    "plt.ylabel('Cumulative Cost ($)')\n",
    "plt.xlabel('Time of Day')\n",
    "\n",
    "# Add a grid and legend\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.legend(loc='upper left')\n",
    "\n",
    "# Add a simple text box with key stats\n",
    "textbox_content = \"Final Costs:\\n\"\n",
    "textbox_content += f\"Cont-Kukanov: ${cont_kukanov_total:,.0f}\\n\"\n",
    "textbox_content += f\"Best Ask: ${best_ask_total:,.0f}\\n\"\n",
    "textbox_content += f\"TWAP: ${twap_total:,.0f}\\n\"\n",
    "textbox_content += f\"VWAP: ${vwap_total:,.0f}\"\n",
    "\n",
    "plt.text(0.02, 0.98, textbox_content, \n",
    "         transform=plt.gca().transAxes, \n",
    "         verticalalignment='top',\n",
    "         bbox=dict(boxstyle='round', facecolor='white', alpha=0.7))\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('/Users/duck/Desktop/results.png', dpi=300)\n",
    "print(\"Plot saved to /Users/duck/Desktop/results.png\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
