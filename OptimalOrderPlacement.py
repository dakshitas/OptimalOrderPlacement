{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "57becc93-db5d-46d4-abc1-6b029f0e5890",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import json\n",
    "from datetime import datetime, timedelta\n",
    "from itertools import product"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a27b7f3-a061-4f98-b847-6a8c9af19e8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def allocate(order_size, venues, lambda_over, lambda_under, theta_queue):\n",
    "    step = 100  # search in 100-share chunks\n",
    "    splits = [[]]  # start with an empty allocation list\n",
    "    \n",
    "    for v in range(len(venues)):\n",
    "        new_splits = []\n",
    "        for alloc in splits:\n",
    "            used = sum(alloc)\n",
    "            max_v = min(order_size - used, venues[v]['ask_size'])\n",
    "            for q in range(0, max_v + 1, step):\n",
    "                new_splits.append(alloc + [q])\n",
    "        splits = new_splits\n",
    "    \n",
    "    best_cost = float('inf')\n",
    "    best_split = []\n",
    "    \n",
    "    for alloc in splits:\n",
    "        if sum(alloc) != order_size:\n",
    "            continue\n",
    "        cost = compute_cost(alloc, venues, order_size, lambda_over, lambda_under, theta_queue)\n",
    "        if cost < best_cost:\n",
    "            best_cost = cost\n",
    "            best_split = alloc\n",
    "    \n",
    "    return best_split, best_cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b641a43f-3849-4f5b-a4e4-4b2cf0c3752a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_cost(split, venues, order_size, lambda_o, lambda_u, theta):\n",
    "    executed = 0\n",
    "    cash_spent = 0\n",
    "    \n",
    "    for i in range(len(venues)):\n",
    "        exe = min(split[i], venues[i]['ask_size'])\n",
    "        executed += exe\n",
    "        cash_spent += exe * (venues[i]['ask'] + venues[i]['fee'])\n",
    "        maker_rebate = max(split[i] - exe, 0) * venues[i]['rebate']\n",
    "        cash_spent -= maker_rebate\n",
    "    \n",
    "    underfill = max(order_size - executed, 0)\n",
    "    overfill = max(executed - order_size, 0)\n",
    "    risk_pen = theta * (underfill + overfill)\n",
    "    cost_pen = lambda_u * underfill + lambda_o * overfill\n",
    "    \n",
    "    return cash_spent + risk_pen + cost_pen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9c16e391-41e5-44db-a607-59bcfe43c874",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Backtester:\n",
    "    def __init__(self, data_file):\n",
    "        self.data = self.load_data(data_file)\n",
    "        self.order_size = 5000\n",
    "        self.start_time = None\n",
    "        self.end_time = None\n",
    "        self.fees = {2: {'fee': 0.0002, 'rebate': 0.0001}}  # Example fees\n",
    "    \n",
    "    def load_data(self, file_path):\n",
    "        df = pd.read_csv(\"l1_day.csv\")\n",
    "        # Convert timestamps\n",
    "        df['ts_event'] = pd.to_datetime(df['ts_event'])\n",
    "        df['ts_recv'] = pd.to_datetime(df['ts_recv'])\n",
    "        # Filter to first message per publisher_id per ts_event\n",
    "        df = df.sort_values(['ts_event', 'publisher_id']).drop_duplicates(['ts_event', 'publisher_id'])\n",
    "        return df\n",
    "    \n",
    "    def get_market_snapshot(self, timestamp):\n",
    "        snapshot = self.data[self.data['ts_event'] == timestamp]\n",
    "        venues = []\n",
    "        for _, row in snapshot.iterrows():\n",
    "            venue = {\n",
    "                'publisher_id': row['publisher_id'],\n",
    "                'ask': row['ask_px_00'],\n",
    "                'ask_size': row['ask_sz_00'],\n",
    "                'fee': self.fees.get(row['publisher_id'], {}).get('fee', 0),\n",
    "                'rebate': self.fees.get(row['publisher_id'], {}).get('rebate', 0)\n",
    "            }\n",
    "            venues.append(venue)\n",
    "        return venues\n",
    "    \n",
    "    def run_cont_kukanov(self, lambda_over, lambda_under, theta_queue):\n",
    "        remaining = self.order_size\n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            if remaining <= 0:\n",
    "                break\n",
    "                \n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            if not venues:\n",
    "                continue\n",
    "                \n",
    "            split, _ = allocate(remaining, venues, lambda_over, lambda_under, theta_queue)\n",
    "            \n",
    "            for i, qty in enumerate(split):\n",
    "                if qty <= 0:\n",
    "                    continue\n",
    "                    \n",
    "                exe = min(qty, venues[i]['ask_size'])\n",
    "                price = venues[i]['ask']\n",
    "                fee = venues[i]['fee']\n",
    "                \n",
    "                cash_spent += exe * (price + fee)\n",
    "                remaining -= exe\n",
    "                shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def run_best_ask(self):\n",
    "        remaining = self.order_size\n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            if remaining <= 0:\n",
    "                break\n",
    "                \n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            if not venues:\n",
    "                continue\n",
    "                \n",
    "            # Find venue with best (lowest) ask price\n",
    "            best_venue = min(venues, key=lambda x: x['ask'])\n",
    "            exe = min(remaining, best_venue['ask_size'])\n",
    "            \n",
    "            cash_spent += exe * (best_venue['ask'] + best_venue['fee'])\n",
    "            remaining -= exe\n",
    "            shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def run_twap(self, window_seconds=60):\n",
    "        total_shares = self.order_size\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        start_time = timestamps[0]\n",
    "        end_time = timestamps[-1]\n",
    "        duration = (end_time - start_time).total_seconds()\n",
    "        intervals = int(duration / window_seconds) or 1\n",
    "        \n",
    "        shares_per_interval = total_shares / intervals\n",
    "        remaining_per_interval = shares_per_interval\n",
    "        current_interval_end = start_time + timedelta(seconds=window_seconds)\n",
    "        \n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            if ts >= current_interval_end:\n",
    "                remaining_per_interval = shares_per_interval\n",
    "                current_interval_end += timedelta(seconds=window_seconds)\n",
    "                \n",
    "            if remaining_per_interval <= 0:\n",
    "                continue\n",
    "                \n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            if not venues:\n",
    "                continue\n",
    "                \n",
    "            # Find venue with best ask price\n",
    "            best_venue = min(venues, key=lambda x: x['ask'])\n",
    "            exe = min(remaining_per_interval, best_venue['ask_size'])\n",
    "            \n",
    "            cash_spent += exe * (best_venue['ask'] + best_venue['fee'])\n",
    "            remaining_per_interval -= exe\n",
    "            shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def run_vwap(self):\n",
    "        total_shares = self.order_size\n",
    "        timestamps = self.data['ts_event'].unique()\n",
    "        \n",
    "        # Calculate total displayed volume\n",
    "        total_displayed = 0\n",
    "        price_volume_pairs = []\n",
    "        \n",
    "        for ts in timestamps:\n",
    "            venues = self.get_market_snapshot(ts)\n",
    "            for venue in venues:\n",
    "                total_displayed += venue['ask_size']\n",
    "                price_volume_pairs.append((venue['ask'], venue['ask_size'], venue['fee']))\n",
    "        \n",
    "        # Sort by price ascending\n",
    "        price_volume_pairs.sort(key=lambda x: x[0])\n",
    "        \n",
    "        remaining = total_shares\n",
    "        cash_spent = 0\n",
    "        shares_filled = 0\n",
    "        \n",
    "        for price, size, fee in price_volume_pairs:\n",
    "            if remaining <= 0:\n",
    "                break\n",
    "                \n",
    "            exe = min(remaining, size)\n",
    "            cash_spent += exe * (price + fee)\n",
    "            remaining -= exe\n",
    "            shares_filled += exe\n",
    "        \n",
    "        avg_price = cash_spent / shares_filled if shares_filled > 0 else 0\n",
    "        return cash_spent, avg_price, shares_filled\n",
    "    \n",
    "    def parameter_search(self):\n",
    "        # Define parameter search space\n",
    "        lambda_over_values = [0.01, 0.05, 0.1]\n",
    "        lambda_under_values = [0.01, 0.05, 0.1]\n",
    "        theta_queue_values = [0.001, 0.005, 0.01]\n",
    "        \n",
    "        best_params = None\n",
    "        best_cash = float('inf')\n",
    "        best_avg_price = 0\n",
    "        \n",
    "        # Grid search\n",
    "        for lo, lu, tq in product(lambda_over_values, lambda_under_values, theta_queue_values):\n",
    "            cash, avg_price, filled = self.run_cont_kukanov(lo, lu, tq)\n",
    "            if cash < best_cash and filled == self.order_size:\n",
    "                best_cash = cash\n",
    "                best_avg_price = avg_price\n",
    "                best_params = {'lambda_over': lo, 'lambda_under': lu, 'theta_queue': tq}\n",
    "        \n",
    "        return best_params, best_cash, best_avg_price\n",
    "    \n",
    "    def run_backtest(self):\n",
    "        # Run parameter search\n",
    "        best_params, ck_cash, ck_avg = self.parameter_search()\n",
    "        \n",
    "        # Run baselines\n",
    "        ba_cash, ba_avg, _ = self.run_best_ask()\n",
    "        twap_cash, twap_avg, _ = self.run_twap()\n",
    "        vwap_cash, vwap_avg, _ = self.run_vwap()\n",
    "        \n",
    "        # Calculate savings in basis points\n",
    "        def calc_bps(new, ref):\n",
    "            return (ref - new) / ref * 10000 if ref != 0 else 0\n",
    "        \n",
    "        savings = {\n",
    "            'vs_best_ask': calc_bps(ck_avg, ba_avg),\n",
    "            'vs_twap': calc_bps(ck_avg, twap_avg),\n",
    "            'vs_vwap': calc_bps(ck_avg, vwap_avg)\n",
    "        }\n",
    "        \n",
    "        results = {\n",
    "            'best_parameters': best_params,\n",
    "            'cont_kukanov': {\n",
    "                'total_cash': ck_cash,\n",
    "                'avg_price': ck_avg\n",
    "            },\n",
    "            'best_ask': {\n",
    "                'total_cash': ba_cash,\n",
    "                'avg_price': ba_avg\n",
    "            },\n",
    "            'twap': {\n",
    "                'total_cash': twap_cash,\n",
    "                'avg_price': twap_avg\n",
    "            },\n",
    "            'vwap': {\n",
    "                'total_cash': vwap_cash,\n",
    "                'avg_price': vwap_avg\n",
    "            },\n",
    "            'savings_bps': savings\n",
    "        }\n",
    "        \n",
    "        return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1257b281-a821-4ac9-b9ce-324c47aca993",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"best_parameters\": {\n",
      "    \"lambda_over\": 0.01,\n",
      "    \"lambda_under\": 0.01,\n",
      "    \"theta_queue\": 0.001\n",
      "  },\n",
      "  \"cont_kukanov\": {\n",
      "    \"total_cash\": 1113701.0,\n",
      "    \"avg_price\": 222.7402\n",
      "  },\n",
      "  \"best_ask\": {\n",
      "    \"total_cash\": 1114103.2799999998,\n",
      "    \"avg_price\": 222.82065599999996\n",
      "  },\n",
      "  \"twap\": {\n",
      "    \"total_cash\": 1254701.155,\n",
      "    \"avg_price\": 223.05798311111113\n",
      "  },\n",
      "  \"vwap\": {\n",
      "    \"total_cash\": 1112845.4000000001,\n",
      "    \"avg_price\": 222.56908\n",
      "  },\n",
      "  \"savings_bps\": {\n",
      "    \"vs_best_ask\": 3.610796298883963,\n",
      "    \"vs_twap\": 14.246659396756224,\n",
      "    \"vs_vwap\": -7.688399484778995\n",
      "  }\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    backtester = Backtester('l1_day.csv')\n",
    "    results = backtester.run_backtest()\n",
    "    print(json.dumps(results, indent=2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "63815496-b6c6-467e-8e64-321d12bef0e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/duck/Desktop/results.png'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA90AAAJOCAYAAACqS2TfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd3hUxRrH8e/uplcILQECofcSehMIvUqR3qsIKKKiXKyo2FEpCoJSpQioNEU6CNKkI9J775CE1E323D8iq2sCJLIhlN/nefJczpw5M++ZJN68O3PmmAzDMBARERERERERpzNndAAiIiIiIiIijyol3SIiIiIiIiLpREm3iIiIiIiISDpR0i0iIiIiIiKSTpR0i4iIiIiIiKQTJd0iIiIiIiIi6URJt4iIiIiIiEg6UdItIiIiIiIikk6UdIuIiIiIiIikEyXdIiIPuT179tCzZ0/y5cuHh4cHPj4+lCtXjo8//phr165ldHh3NHz4cEwm03+6dsmSJQwfPjzFcyEhIfTo0eO/B/Yf1a5dG5PJlOJXSEjIfY/nv4iOjmb48OGsXbs22bmpU6diMpk4ceLEfY8LwGaz8e2331KvXj2yZs2Kq6sr2bNnp1mzZixevBibzeb0Pvft28fw4cPTfM+bN2+mbdu2BAUF4ebmRmBgIG3atGHTpk1Oj/Fe3Oln9p9fw4cPz/Dvv4jIw8olowMQEZH/7uuvv2bAgAEUKVKEl19+meLFi2O1Wtm2bRtfffUVmzZtYv78+RkdZrpYsmQJX375ZYqJ9/z58/Hz87v/QQH58+dn5syZycrd3d0zIJq0i46O5u233waSErJ/atq0KZs2bSIoKOi+xxUbG0vLli1Zvnw5HTp0YPz48QQGBnL58mWWLl1K27ZtmTNnDi1atHBqv/v27ePtt9+mdu3aqf7gZOzYsQwePJhKlSrx8ccfkzdvXk6dOsWXX35JjRo1GD16NM8++6xT4/yvxo0bR0REhP34559/ZsSIEUyZMoWiRYvay3Pnzo27u3uGff9FRB5mSrpFRB5SmzZton///tSvX58FCxY4JHX169fnpZdeYunSpRkYYcYJDQ3NsL49PT2pUqVKhvWfnrJly0a2bNkypO8XX3yRZcuWMW3aNLp16+ZwrnXr1rz88svExMRkSGz/tGHDBgYPHkyTJk2YP38+Li5//6nVoUMHWrVqxfPPP09oaCjVq1e/b3HFxMTg4eGRbGVJ8eLFHY4PHDgAQMmSJalQoUKydjLq+y8i8jDT8nIRkYfU+++/j8lkYuLEiSnOorq5ufHkk0/aj28tEf23fy/FvrWEdPXq1fTt25csWbLg5+dHt27diIqK4sKFC7Rr145MmTIRFBTEkCFDsFqt9uvXrl2LyWRKtjz5xIkTmEwmpk6desf7mjNnDg0aNCAoKAhPT0+KFSvG//73P6Kioux1evTowZdffmm/r1tft5a9/vOeLl++jJubG2+88Uayvg4cOIDJZGLMmDH2sgsXLtCvXz9y586Nm5sb+fLl4+233yYhIeGOcaeWYRg0adKELFmycOrUKXt5dHQ0JUqUoFixYvZ7NQyDcePGUbZsWTw9PcmcOTNt2rTh2LFjydpdunQpdevWxd/fHy8vL4oVK8YHH3xgP1+7du1kM9eQNJa3ZnBPnDhhT6refvtt+7jeGsvbLS+ePHkyZcqUwcPDg4CAAFq1asX+/fuT9ePj48ORI0do0qQJPj4+BAcH89JLLxEXF3fHMbtw4QLffPMNDRs2TJZw31KoUCFKly5tPz516hRdunQhe/bsuLu7U6xYMT799NNkS9DHjx9PmTJl8PHxwdfXl6JFi/Lqq6/a77dt27YAhIWF2cfjTj/DH3zwASaTifHjxzsk3AAuLi6MGzcOk8nEhx9+CMCCBQswmUysWrUqWVvjx4/HZDKxZ88ee9m2bdt48sknCQgIwMPDg9DQUObOnetw3a3v0/Lly+nVqxfZsmXDy8vrruN8Nyl9/2vXrk3JkiXZtGkT1apVw9PTk5CQEKZMmQIkzZyXK1cOLy8vSpUqleIHgYcPH6ZTp04O36tbv98iIo8CJd0iIg+hxMREVq9eTfny5QkODk6XPvr06YO/vz/fffcdr7/+OrNmzaJv3740bdqUMmXK8P3339O9e3c+/fRTxo4d67R+Dx8+TJMmTZg0aRJLly5l8ODBzJ07l+bNm9vrvPHGG7Rp0wZImvG/9ZXSstds2bLRrFkzpk2blizhmjJlCm5ubnTu3BlISu4qVarEsmXLePPNN/nll1/o3bs3H3zwAX379k31PSQkJCT7utW3yWTi22+/xcvLi3bt2tk/sBgwYADHjx9n7ty5eHt7A9CvXz8GDx5MvXr1WLBgAePGjePPP/+kWrVqXLx40d7fpEmTaNKkCTabja+++orFixczaNAgzpw5k+qYAYKCguxJUe/eve3jmtIHFrd88MEH9O7dmxIlSvDjjz8yevRo9uzZQ9WqVTl8+LBDXavVypNPPkndunVZuHAhvXr14vPPP+ejjz66Y1xr1qzBarXSsmXLVN3H5cuXqVatGsuXL+fdd99l0aJF1KtXjyFDhjgs6/7uu+8YMGAAtWrVYv78+SxYsIAXXnjB/qFH06ZNef/99wH48ssv7ePRtGnTFPtNTExkzZo1VKhQgdy5c6dYJzg4mPLly7N69WoSExNp1qwZ2bNntyep/zR16lTKlStn/zBhzZo1VK9enRs3bvDVV1+xcOFCypYtS/v27VP8IKBXr164urry7bff8v333+Pq6pqq8UurCxcu0LNnT/r06cPChQspVaoUvXr14p133mHYsGG88sor/PDDD/j4+NCyZUvOnTtnv3bfvn1UrFiRvXv38umnn/LTTz/RtGlTBg0aZH/MQUTkoWeIiMhD58KFCwZgdOjQIdXXAMZbb72VrDxv3rxG9+7d7cdTpkwxAOO5555zqNeyZUsDMD777DOH8rJlyxrlypWzH69Zs8YAjDVr1jjUO378uAEYU6ZMsZe99dZbxp3+r8hmsxlWq9X49ddfDcDYvXu3/dzAgQNve+2/72nRokUGYCxfvtxelpCQYOTMmdN46qmn7GX9+vUzfHx8jJMnTzq0N3LkSAMw/vzzz9vGahiGUatWLQNI8at3794OdX/77TfDxcXFGDx4sDF58mQDML755hv7+U2bNhmA8emnnzpcd/r0acPT09N45ZVXDMMwjMjISMPPz8+oUaOGYbPZ7hhbrVq1kpV3797dyJs3r/348uXLt/1ZufWzcfz4ccMwDOP69euGp6en0aRJE4d6p06dMtzd3Y1OnTo59AMYc+fOdajbpEkTo0iRIreN2zAM48MPPzQAY+nSpXesd8v//vc/AzC2bNniUN6/f3/DZDIZBw8eNAzDMJ599lkjU6ZMd2xr3rx5Kf48pyS1v5ft27c3AOPixYuGYRjGiy++aHh6eho3btyw19m3b58BGGPHjrWXFS1a1AgNDTWsVqtDe82aNTOCgoKMxMREwzD+/j5169btrjH/261rt27dettzt77/hvH3z/y2bdvsZVevXjUsFovh6elpnD171l6+a9cuAzDGjBljL2vYsKGRO3du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73pttWrVyJw5M8888wxvvfUWrq6uzJw5k927dyereyvp/Oijj+yzhqVLl7bPFKekV69e9OvXj3PnzlGtWrVkM4PvvPMOK1asoFq1agwaNIgiRYoQGxvLiRMnWLJkCV999dVdVxXExMTc9jnUW+/vXrFiBR988AFvvPGGPTH94IMPGDJkCLVr16ZVq1ZUr16dp59+mp49e7Jt2zZq1qyJt7c358+f57fffqNUqVL0798fHx8fPv30U/r06UO9evXo27cvOXLk4MiRI+zevZsvvvgCSPr+T5gwgS5dutC3b1+uXr3Kxx9/jJ+fn0OMvr6+5M2bl4ULF1K3bl0CAgLImjVrisu1M2XKxBtvvMGrr75Kt27d6NixI1evXuXtt9/Gw8ODt956645jlRafffYZx44do0ePHixbtoxWrVqRI0cOrly5wooVK5gyZQrfffcdpUuX5oUXXmD69Ok0bdqUd955h7x58/Lzzz8zbtw4+vfvT+HChQHo27cvnp6eVK9enaCgIC5cuMAHH3yAv78/FStWBJLeVw0wceJEfH198fDwIF++fLdNBqtXr86oUaMYPHgwNWrU4NlnnyVPnjycOnWKL7/8ki1btjBq1CiqVauWbCxbtWrF1KlTuXHjBkOGDMFsdpwbmTBhAo0bN6Zhw4b06NGDXLlyce3aNfbv38+OHTuYN2+e08b7fhk9ejQ1atTgiSeeoH///oSEhBAZGcmRI0dYvHix/lYSkUdDhm3h9hACjPnz59uP586dawCGt7e3w5eLi4vRrl07wzAMo2/fvgZg3ynVMAxj+/btBmAcOHDgft+CiDyCdu3aZXTv3t3IkyeP4ebmZnh7exuhoaHGm2++aVy6dMleLy4uznjllVeM4OBgw9PT06hVq5axa9eu2+5e/u/di2/tNH758mWH8u7duxve3t4OZefPnzfatGljBAQEGP7+/kaXLl2Mbdu2pWr38o0bNxpVq1Y1vLy8jGzZshl9+vQxduzYkezauLg4o0+fPka2bNkMk8nksKvyv+/plvDwcMPT09MAjK+//jrF8bx8+bIxaNAgI1++fIarq6sREBBglC9f3njttdeMmzdvpnjNLXfavRwwrFarce7cOSN79uxGnTp17LtNG0bSTu3Nmzc3MmXK5LA79OTJk43KlSsb3t7ehqenp1GgQAGjW7duDrtFG4ZhLFmyxKhVq5bh7e1teHl5GcWLFzc++ugjhzrTpk0zihUrZnh4eBjFixc35syZk2z3csMwjJUrVxqhoaGGu7u7AdjHMqXdqw3DML755hujdOnShpubm+Hv72+0aNEi2U7vKf2cGMbdd7D/p4SEBGPatGlGnTp1jICAAMPFxcXIli2b0bhxY2PWrFkO43ny5EmjU6dORpYsWQxXV1ejSJEixieffOJQZ9q0aUZYWJiRI0cOw83NzciZM6fRrl07Y8+ePQ79jho1ysiXL59hsViS/RzezqZNm4w2bdoYOXLkMFxcXIzs2bMbrVu3NjZu3Hjba5YvX27/WTl06FCKdXbv3m20a9fOyJ49u+Hq6moEBgYaderUMb766it7nTvtQH43/2X38hIlSiSrmzdvXqNp06bJygFj4MCBDmXHjx83evXqZeTKlctwdXU1smXLZlSrVs0YMWJEmuMXEXkQmQzjDmvRxIHJZGL+/Pn294TOmTOHzp078+effzo8lwXg4+NDYGAgb731Fu+//779PayQNAvi5eXF8uXL/9NGLSIiIiIiIvJw0PLyexAaGkpiYiKXLl3iiSeeSLFO9erVSUhI4OjRoxQoUACAQ4cOAaR5gxYRERERERF5uGim+y5u3rzJkSNHgKQk+7PPPiMsLIyAgADy5MlDly5d2LBhA59++imhoaFcuXKF1atXU6pUKZo0aWJ//YiPjw+jRo3CZrMxcOBA/Pz8WL58eQbfnYiIiIiIiKQnJd13sXbt2hR3Oe3evTtTp07FarUyYsQIpk+fztmzZ8mSJQtVq1bl7bfftm/yc+7cOZ577jmWL19u3x31008/TfG9liIiIiIiIvLoUNItIiIiIiIikk70nm4RERERERGRdKKkW0RERERERCSdaPfyFNhsNs6dO4evry8mkymjwxEREREREZEHjGEYREZGkjNnTszm289nK+lOwblz5wgODs7oMEREREREROQBd/r0aXLnzn3b80q6U+Dr6wskDZ6fn18GR/PosFqtLF++nAYNGuDq6prR4TxWNPYZR2OfcTT2GUdjn3E09hlHY59xNPYZ53Ef+4iICIKDg+354+0o6U7BrSXlfn5+SrqdyGq14uXlhZ+f32P5S5mRNPYZR2OfcTT2GUdjn3E09hlHY59xNPYZR2Of5G6PJGsjNREREREREZF0oqRbREREREREJJ0o6RYRERER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mDlzZqlzs2fPpm3btt7/kTt16sScOXNKvdc9e/ZsOnc+/iZTvr6++Pr6HnPebrdXyz88lU11rTqqfdVR7auOal91VPuqo9pXHdW+6qj2Vae61r6sc67S0J2Xl8e2bdu8xzt37mTVqlWEh4dTq1YtxowZw/79+5k6dSoAN998M5MmTeKee+7hhhtuYMmSJbz99tulViW/66676N69O+PHj2fIkCF8/fXXzJ07l19++eW0z09ERERERESqN0tVfvNly5bRqlUrWrVqBcA999xDq1ateOyxxwA4ePAge/bs8bavXbs2s2bN4qeffqJly5b85z//YeLEiaX2+O7cuTOffPIJ7777Ls2bN2fKlClMmzbtnN+jW0RERERERM48VXqnu2fPnt6F0P7OlClTjjnXo0cPVqxYccJ+R44cyciRI091eCIiIiIiIiKnpErvdIuIiIiIiIicyxS6RURERERERCqJQreIiIiIiIhIJVHoFhEREREREakkCt0iIiIiIiIilUShW0RERERERKSSKHSLiIiIiIiIVBKFbhEREREREZFKotAtIiIiIiIiUkkUukVEREREREQqiUK3iIiIiIiISCVR6BYRERERERGpJArdIiIiIiIiIpVEoVtERERERESkkih0i4iIiIiIiFQSW1UP4ExkmiYAOTk5VTySc4vD4aCgoICcnBzsdntVD6daUe2rjmpfdVT7qqPaVx3Vvuqo9lVHta861b32f+bFP/Pj8Sh0/43c3FwAatasWcUjERERERERkTNZbm4uoaGhx/3cMP8plldDbrebAwcOEBwcjGEYVT2cc0ZOTg41a9Zk7969hISEVPVwqhXVvuqo9lVHta86qn3VUe2rjmpfdVT7qlPda2+aJrm5ucTHx2OxHP/Nbd3p/hsWi4XExMSqHsY5KyQkpFr+n/JMoNpXHdW+6qj2VUe1rzqqfdVR7auOal91qnPtT3SH+09aSE1ERERERESkkih0i4iIiIiIiFQShW45bXx9fRk7diy+vr5VPZRqR7WvOqp91VHtq45qX3VU+6qj2lcd1b7qqPZlo4XURERERERERCqJ7nSLiIiIiIiIVBKFbhEREREREZFKotAtIiIiIiIiUkkUuquxV199ldq1a+Pn50ebNm34+eefS33+5ZdfMmDAACIjIzEMg1WrVv1jn+vXr2fEiBEkJydjGAYTJkw4ps1rr71G8+bNvfv5derUie++++6E/aanp3PeeecRHx+Pr68vNWvW5PbbbycnJ8fbZty4cRiGccx/gYGBZarH6XSu1R7ghx9+oGPHjgQHBxMVFcWIESPYuXPnP477dDsXa//pp5/SsmVLAgICSEpK4r///e8/jrkqnE21/6v09HQSExMxDIOsrKxSn61du5YePXrg7+9PQkICTzzxBGfiUinnWu2Lioq45ppraNasGTabjaFDh5a5z9PtXKv9Tz/9xJAhQ4iLiyMwMJCWLVvy4Ycflrnf0+lcq/3mzZvp1asXMTEx+Pn5kZKSwiOPPILD4Shz36fLuVb7v9q2bRvBwcHUqFGjzP2eTuda7Xft2vW3P99///33Ze77TKDQXU1NmzaNu+++m4cffpiVK1fSrVs3Bg4cyJ49e7xt8vPz6dKlC88++2yZ+y0oKCAlJYVnn32W2NjYv22TmJjIs88+y7Jly1i2bBm9e/dmyJAhrF+//rj9WiwWhgwZwowZM9iyZQtTpkxh7ty53Hzzzd429913HwcPHiz1X+PGjbnooovKPP7T4Vys/Y4dOxgyZAi9e/dm1apV/PDDDxw5coThw4eXefynw7lY+++++47LL7+cm2++mXXr1vHqq6/ywgsvMGnSpDKP/3Q422r/V9dddx3Nmzc/5nxOTg79+vUjPj6epUuX8vLLL/P888/zwgsvlHn8p8O5WHuXy4W/vz933nknffv2LfOYT7dzsfaLFy+mefPmfPHFF6xZs4Z//etfXHXVVcycObPM4z8dzsXa2+12rrrqKmbPns3mzZuZMGECb731FmPHji3z+E+Hc7H2f3I4HFx22WV069atzOM+nc7l2s+dO7fUz/i9e/cu8/jPCKZUS+3btzdvvvnmUucaNmxoPvjgg8e03blzpwmYK1euLNf3SEpKMl988cUytQ0LCzMnT55crv5feuklMzEx8bifr1q1ygTMhQsXlqvfynYu1v6zzz4zbTab6XK5vOdmzJhhGoZhlpSUlKvvynQu1v6yyy4zR44cWarNiy++aCYmJpput7tcfVems7X2r776qtmjRw9z3rx5JmBmZmaW+iw0NNQsKirynnvmmWfM+Ph41f4EKqL2f3X11VebQ4YMKftgT6NzvfZ/Ov/8881rr722TGM4XapL7UePHm127dq1TGM4Xc7l2t9///3mFVdcYb77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",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Simulated cumulative cost data for illustrative purposes\n",
    "timestamps = pd.date_range(start=\"2024-08-01 13:36:32\", periods=30, freq=\"18s\")\n",
    "cont_kukanov_costs = 1_000_000 + (timestamps.to_series().rank() * 457).cumsum()\n",
    "best_ask_costs = 1_000_000 + (timestamps.to_series().rank() * 468).cumsum()\n",
    "twap_costs = 1_000_000 + (timestamps.to_series().rank() * 500).cumsum()\n",
    "vwap_costs = 1_000_000 + (timestamps.to_series().rank() * 440).cumsum()\n",
    "\n",
    "# Plot cumulative cost over time\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(timestamps, cont_kukanov_costs, label='Cont-Kukanov (Tuned)', linewidth=2)\n",
    "plt.plot(timestamps, best_ask_costs, label='Best Ask', linestyle='--')\n",
    "plt.plot(timestamps, twap_costs, label='TWAP', linestyle='-.')\n",
    "plt.plot(timestamps, vwap_costs, label='VWAP', linestyle=':')\n",
    "\n",
    "plt.xlabel('Timestamp')\n",
    "plt.ylabel('Cumulative Cost ($)')\n",
    "plt.title('Cumulative Execution Cost Over Time')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "\n",
    "output_path = \"/Users/duck/Desktop/results.png\"\n",
    "plt.savefig(output_path)\n",
    "\n",
    "output_path"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
